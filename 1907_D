D. Jumping Through Segments

STATEMENT
Polycarp is designing a level for a game. The level consists of n segments on the number line, 
where the i-th segment starts at the point with coordinate li and ends at the point with coordinate ri.
The player starts the level at the point with coordinate 0. 
In one move, they can move to any point that is within a distance of no more than k. After their i-th move, 
the player must land within the i-th segment, that is, at a coordinate x such that li≤x≤ri. This means:
After the first move, they must be inside the first segment (from l1to r1);
After the second move, they must be inside the second segment (from l2 to r2);...After the n-th move, 
they must be inside the n-th segment (from ln to rn). 
The level is considered completed if the player reaches the n-th segment, following the rules described above. 
After some thought, Polycarp realized that it is impossible to complete the level with some values of k.

SOLUTION

C++
#include <bits/stdc++.h>
using namespace std;

#define int long long
#define yes cout << "Yes" << endl;
#define no cout << "No" << endl;
#define neg cout << -1 << endl;
#define pb push_back
int mod = 1e9 + 7;
int md = 998244353;
const int INF = 1e18;

void solve()
{
    int n;
    cin>>n;
    vector<pair<int, int>>v(n);
    for(int i=0; i<n; i++)
    {
        cin>>v[i].first>>v[i].second;
    }

    int ans=1e9, left=0, right=ans;

    while(left<right)
    {
        int mid=left+(right-left)/2;
        int x=0, y=0;
        int f=0;

        for(int i=0; i<n; i++)
        {
            x-=mid;
            y+=mid;
            x=max(v[i].first, x);
            y=min(v[i].second, y);
            if(x>y)
            {
                f=1;
                break;
            }
        }

        if(f==0)
        {
            right=mid;
        }
        else
        {
            left=mid+1;
        }
        ans=left;
    }

    cout<<ans<<endl;
}

signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int test = 1;
    cin >> test;

    for (int tc = 1; tc <= test; tc++)
    {
        solve();
    }

    return 0;
}
